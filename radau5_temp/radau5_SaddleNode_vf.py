# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _radau5_SaddleNode_vf
else:
    import _radau5_SaddleNode_vf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_doubleArray(nelements):
    return _radau5_SaddleNode_vf.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _radau5_SaddleNode_vf.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _radau5_SaddleNode_vf.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _radau5_SaddleNode_vf.doubleArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _radau5_SaddleNode_vf.new_intArray(nelements)

def delete_intArray(ary):
    return _radau5_SaddleNode_vf.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _radau5_SaddleNode_vf.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _radau5_SaddleNode_vf.intArray_setitem(ary, index, value)

def Integrate(ic, t, hinit, hmax, safety, jacRecompute, newtonStop, stepChangeLB, stepChangeUB, stepSizeLB, stepSizeUB, hessenberg, maxNewton, newtonStart, index1dim, index2dim, index3dim, stepSizeStrategy, DAEstructureM1, DAEstructureM2, useJac, useMass, verbose, calcAux, calcSpecTimes):
    return _radau5_SaddleNode_vf.Integrate(ic, t, hinit, hmax, safety, jacRecompute, newtonStop, stepChangeLB, stepChangeUB, stepSizeLB, stepSizeUB, hessenberg, maxNewton, newtonStart, index1dim, index2dim, index3dim, stepSizeStrategy, DAEstructureM1, DAEstructureM2, useJac, useMass, verbose, calcAux, calcSpecTimes)

def InitBasic(PhaseDim, ParamDim, nAux, nEvents, nExtInputs, HasJac, HasJacP, HasMass, extraSize):
    return _radau5_SaddleNode_vf.InitBasic(PhaseDim, ParamDim, nAux, nEvents, nExtInputs, HasJac, HasJacP, HasMass, extraSize)

def CleanUp():
    return _radau5_SaddleNode_vf.CleanUp()

def InitInteg(Maxpts, atol, rtol):
    return _radau5_SaddleNode_vf.InitInteg(Maxpts, atol, rtol)

def ClearInteg():
    return _radau5_SaddleNode_vf.ClearInteg()

def InitEvents(Maxevtpts, EventActive, EventDir, EventTerm, EventInterval, EventDelay, EventTol, Maxbisect, EventNearCoef):
    return _radau5_SaddleNode_vf.InitEvents(Maxevtpts, EventActive, EventDir, EventTerm, EventInterval, EventDelay, EventTol, Maxbisect, EventNearCoef)

def ClearEvents():
    return _radau5_SaddleNode_vf.ClearEvents()

def InitExtInputs(nExtInputs, extInputLens, extInputVals, extInputTimes):
    return _radau5_SaddleNode_vf.InitExtInputs(nExtInputs, extInputLens, extInputVals, extInputTimes)

def ClearExtInputs():
    return _radau5_SaddleNode_vf.ClearExtInputs()

def SetRunParameters(ic, pars, gt0, t0, tend, refine, specTimeLen, specTimes, upperBounds, lowerBounds):
    return _radau5_SaddleNode_vf.SetRunParameters(ic, pars, gt0, t0, tend, refine, specTimeLen, specTimes, upperBounds, lowerBounds)

def ClearParams():
    return _radau5_SaddleNode_vf.ClearParams()

def Reset():
    return _radau5_SaddleNode_vf.Reset()

def SetContParameters(tend, pars, upperBounds, lowerBounds):
    return _radau5_SaddleNode_vf.SetContParameters(tend, pars, upperBounds, lowerBounds)

def Vfield(t, x, p):
    return _radau5_SaddleNode_vf.Vfield(t, x, p)

def Jacobian(t, x, p):
    return _radau5_SaddleNode_vf.Jacobian(t, x, p)

def JacobianP(t, x, p):
    return _radau5_SaddleNode_vf.JacobianP(t, x, p)

def AuxFunc(t, x, p):
    return _radau5_SaddleNode_vf.AuxFunc(t, x, p)

def MassMatrix(t, x, p):
    return _radau5_SaddleNode_vf.MassMatrix(t, x, p)


